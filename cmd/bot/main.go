// Package main –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è Telegram –±–æ—Ç–∞,
// –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–ª–∏–∑–∞–º–∏ GitHub –ø—Ä–æ–µ–∫—Ç–∞
package main

import (
	"fmt"
	"log"

	"github.com/your-project/api"
	"github.com/your-project/types"
)

func showHelp(chatID int64) error {
	helpText := `*ü§ñ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–ª–∏–∑–∞–º*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ª–∏–∑–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ Pull Requests
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–ª–∏–∑–∞—Ö
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`

	keyboard := [][]types.InlineKeyboardButton{
		{
			{
				Text:         "üåø –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫",
				CallbackData: "show_branches",
			},
			{
				Text:         "üîÄ Pull Requests",
				CallbackData: "show_prs",
			},
		},
		{
			{
				Text:         "üì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã",
				CallbackData: "show_latest_release",
			},
			{
				Text:         "üì¶ –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑",
				CallbackData: "create_release",
			},
		},
	}

	if err := api.SendMessage(chatID, helpText, keyboard); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏: %w", err)
	}

	return nil
}

func handleCallback(callback *types.CallbackQuery) {
	if !isUserAllowed(callback.UserID) {
		if err := api.AnswerCallbackQuery(callback.ID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		}
		return
	}

	if !isChatAllowed(callback.ChatID) {
		if err := api.AnswerCallbackQuery(callback.ID, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		}
		return
	}

	switch callback.Data {
	case "back_to_main":
		if err := showHelp(callback.ChatID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏: %v", err)
		}
	case "show_branches":
		handleShowBranches(callback)
	case "show_prs":
		handleShowPRs(callback)
	case "show_latest_release":
		handleShowLatestRelease(callback)
	case "create_release":
		handleReleaseCommand(callback)
	default:
		if err := api.AnswerCallbackQuery(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		}
	}
}

func handleMessage(message *types.Message) {
	if !isUserAllowed(message.UserID) {
		if err := api.SendMessage(message.ChatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	if !isChatAllowed(message.ChatID) {
		if err := api.SendMessage(message.ChatID, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	switch message.Text {
	case "/start", "/help":
		if err := showHelp(message.ChatID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏: %v", err)
		}
	default:
		if err := api.SendMessage(message.ChatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
} 