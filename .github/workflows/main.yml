name: Release Build

on:
  push:
    branches: [ master, main ]
    paths:
      - 'app/**'
      - 'gradle/**'
      - 'build.gradle*'
      - 'settings.gradle*'
      - 'gradle.properties'
      - '.github/workflows/main.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    # Сохраняем время начала сборки
    - name: Set build start time
      id: build-time-start
      run: echo "BUILD_START=$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: Generate build number
      id: buildnumber
      uses: onyxmueller/build-tag-number@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prefix: 'android'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    # Установка Android SDK Build Tools
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        cmdline-tools-version: '8.0'
        packages: 'build-tools;35.0.0,build-tools;33.0.0,build-tools;30.0.3,build-tools;29.0.3,platforms;android-35'

    # Кэширование Gradle Wrapper
    - name: Cache Gradle Wrapper
      id: cache-gradle-wrapper
      continue-on-error: true
      timeout-minutes: 5
      uses: actions/cache@v3
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-wrapper-
    
    # Кэширование зависимостей Gradle
    - name: Cache Gradle dependencies
      id: cache-gradle-deps
      continue-on-error: true
      timeout-minutes: 10
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/daemon
          ~/.gradle/native
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Кэширование Maven репозитория
    - name: Cache Maven repository
      id: cache-maven
      continue-on-error: true
      timeout-minutes: 8
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/build.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    # Кэширование Android SDK
    - name: Cache Android SDK
      id: cache-android-sdk
      continue-on-error: true
      timeout-minutes: 15
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.ANDROID_HOME }}
          ~/.android/cache
        key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/build.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
    
    # Кэширование результатов сборки
    - name: Cache Build results
      id: cache-build
      continue-on-error: true
      timeout-minutes: 12
      uses: actions/cache@v3
      with:
        path: app/build
        key: ${{ runner.os }}-app-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-app-build-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Determine version
      id: version
      run: |
        # Получаем последний тег релиза
        git fetch --tags
        LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | head -n 1 || echo "v1.0.0")
        
        # Если тега нет, начинаем с версии 1.0.0
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v1.0.0"
        fi
        
        # Удаляем префикс v из тега
        LATEST_VERSION="${LATEST_TAG#v}"
        
        # Разбиваем на компоненты major.minor.patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
        
        # Увеличиваем patch версию
        PATCH=$((PATCH + 1))
        
        # Формируем новую версию
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "Версия: $NEW_VERSION"
        
        # Выводим для использования в других шагах
        echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version code and name
      run: |
        echo "Build number: ${{ steps.buildnumber.outputs.build_number }}"
        echo "Version: ${{ steps.version.outputs.VERSION }}"
        
        # Обновляем версию в build.gradle.kts
        sed -i "s/versionCode = .*/versionCode = ${{ steps.buildnumber.outputs.build_number }}/g" app/build.gradle.kts
        sed -i "s/versionName = .*/versionName = \"${{ steps.version.outputs.VERSION }}\"/g" app/build.gradle.kts

    # Для master/main собираем release-версию APK и Bundle
    - name: Build release APK and Bundle
      run: ./gradlew assembleRelease bundleRelease --build-cache --parallel --no-daemon
    
    # Подписываем релизные APK файлы
    - name: Sign APK
      id: sign_apk
      uses: r0adkll/sign-android-release@v1
      env:
        BUILD_TOOLS_VERSION: "35.0.0"
        ANDROID_HOME: "/usr/local/lib/android/sdk"
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}

    # Подписываем релизные AAB файлы
    - name: Sign Bundle
      id: sign_bundle
      uses: r0adkll/sign-android-release@v1
      env:
        BUILD_TOOLS_VERSION: "35.0.0"
        ANDROID_HOME: "/usr/local/lib/android/sdk"
      with:
        releaseDirectory: app/build/outputs/bundle/release
        signingKeyBase64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}

    # Переименовываем APK и Bundle файлы, добавляя номер версии
    - name: Rename APK and Bundle files
      run: |
        mkdir -p renamed_apk
        
        # Копируем APK с проверкой
        if [ -f "${{ steps.sign_apk.outputs.signedReleaseFile }}" ]; then
          cp "${{ steps.sign_apk.outputs.signedReleaseFile }}" "renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.apk"
          echo "✅ APK file copied successfully"
        else
          echo "⚠️ Signed APK not found at: ${{ steps.sign_apk.outputs.signedReleaseFile }}"
          echo "Looking for alternative APK file..."
          # Поиск альтернативных файлов
          if [ -f "app/build/outputs/apk/release/app-release-signed.apk" ]; then
            cp "app/build/outputs/apk/release/app-release-signed.apk" "renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.apk"
            echo "✅ Alternative APK file copied"
          else
            echo "❌ No signed APK found!"
            exit 1
          fi
        fi
        
        # Копируем Bundle с проверкой
        if [ -f "${{ steps.sign_bundle.outputs.signedReleaseFile }}" ]; then
          cp "${{ steps.sign_bundle.outputs.signedReleaseFile }}" "renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.aab"
          echo "✅ Bundle file copied successfully"
        else
          echo "⚠️ Signed Bundle not found at: ${{ steps.sign_bundle.outputs.signedReleaseFile }}"
          echo "Looking for alternative Bundle file..."
          # Поиск альтернативных файлов
          if [ -f "app/build/outputs/bundle/release/app-release-signed.aab" ]; then
            cp "app/build/outputs/bundle/release/app-release-signed.aab" "renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.aab"
            echo "✅ Alternative Bundle file copied"
          else
            echo "❌ No signed Bundle found!"
            exit 1
          fi
        fi
    
    # Загружаем release APK
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release-${{ steps.version.outputs.VERSION }}
        path: renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.apk
        retention-days: 90
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        content-type: application/vnd.android.package-archive
    
    # Загружаем release AAB
    - name: Upload Release Bundle
      uses: actions/upload-artifact@v4
      with:
        name: app-release-bundle-${{ steps.version.outputs.VERSION }}
        path: renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.aab
        retention-days: 90
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        content-type: application/octet-stream
    
    # Расчет времени сборки
    - name: Calculate build time
      id: build-time
      run: |
        END_TIME=$(date +%s)
        START_TIME=${{ steps.build-time-start.outputs.BUILD_START }}
        DURATION=$((END_TIME - START_TIME))
        
        # Форматируем время в минуты и секунды
        MINUTES=$((DURATION / 60))
        SECONDS=$((DURATION % 60))
        
        if [ $MINUTES -gt 0 ]; then
          BUILD_TIME="${MINUTES}м ${SECONDS}с"
        else
          BUILD_TIME="${SECONDS}с"
        fi
        
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
    
    # Создаем релиз с переименованным APK
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.apk,renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.aab"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: v${{ steps.version.outputs.VERSION }}
        name: Release v${{ steps.version.outputs.VERSION }}
        body: |
          Автоматическая релизная сборка из ветки master
          
          Номер сборки: ${{ steps.buildnumber.outputs.build_number }}
          Версия: ${{ steps.version.outputs.VERSION }}
          Коммит: ${{ github.sha }}
          
          В релизе:
          - APK файл для установки на устройство
          - AAB файл для загрузки в Google Play
          
          Примечание: Эта сборка использует релизную конфигурацию с официальной подписью.
          Время сборки: ${{ steps.build-time.outputs.build_time }}
        draft: false
        prerelease: false
        makeLatest: true
    
    # Очистка кэшей в редких случаях
    - name: Cleanup Gradle Cache
      # Запускается только по условию, например, еженедельно
      if: github.event_name == 'schedule' && github.event.schedule == '0 0 * * 0'
      run: |
        rm -rf ~/.gradle/caches/modules-2/modules-2.lock
        rm -rf ~/.gradle/caches/transforms-1
        rm -rf ~/.gradle/caches/journal-1
        rm -rf ~/.gradle/caches/jars-3 
