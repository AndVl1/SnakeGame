name: Release Build

on:
  push:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Generate build number
      id: buildnumber
      uses: onyxmueller/build-tag-number@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prefix: 'android'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Determine version
      id: version
      run: |
        # Получаем последний тег релиза
        git fetch --tags
        LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | head -n 1 || echo "v1.0.0")
        
        # Если тега нет, начинаем с версии 1.0.0
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v1.0.0"
        fi
        
        # Удаляем префикс v из тега
        LATEST_VERSION="${LATEST_TAG#v}"
        
        # Разбиваем на компоненты major.minor.patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
        
        # Увеличиваем patch версию
        PATCH=$((PATCH + 1))
        
        # Формируем новую версию
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "Версия: $NEW_VERSION"
        
        # Выводим для использования в других шагах
        echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version code and name
      run: |
        echo "Build number: ${{ steps.buildnumber.outputs.build_number }}"
        echo "Version: ${{ steps.version.outputs.VERSION }}"
        
        # Обновляем версию в build.gradle.kts
        sed -i "s/versionCode = .*/versionCode = ${{ steps.buildnumber.outputs.build_number }}/g" app/build.gradle.kts
        sed -i "s/versionName = .*/versionName = \"${{ steps.version.outputs.VERSION }}\"/g" app/build.gradle.kts
    
    # Для master/main собираем release-версию
    - name: Build release APK
      run: ./gradlew assembleRelease
    
    # Переименовываем APK файлы, добавляя номер версии
    - name: Rename APK files
      run: |
        mkdir -p renamed_apk
        cp app/build/outputs/apk/release/app-release.apk renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.apk
    
    # Загружаем release APK
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release-${{ steps.version.outputs.VERSION }}
        path: renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.apk
    
    # Создаем релиз с переименованным APK
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "renamed_apk/app-release-${{ steps.version.outputs.VERSION }}.apk"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: v${{ steps.version.outputs.VERSION }}
        name: Release v${{ steps.version.outputs.VERSION }}
        body: |
          Автоматическая релизная сборка из ветки master
          
          Номер сборки: ${{ steps.buildnumber.outputs.build_number }}
          Версия: ${{ steps.version.outputs.VERSION }}
          Коммит: ${{ github.sha }}
          
          Примечание: Эта сборка использует релизную конфигурацию с дебажной подписью.
        draft: false
        prerelease: false
        makeLatest: true 