name: Develop Build

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    # Сохраняем время начала сборки
    - name: Set build start time
      id: build-time-start
      run: echo "BUILD_START=$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: Generate build number
      id: buildnumber
      uses: onyxmueller/build-tag-number@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prefix: 'android'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    # Кэширование Gradle Wrapper
    - name: Cache Gradle Wrapper
      uses: actions/cache@v3
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-wrapper-
    
    # Кэширование зависимостей Gradle
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/daemon
          ~/.gradle/native
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Кэширование Maven репозитория
    - name: Cache Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/build.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    # Кэширование Android SDK
    - name: Cache Android SDK
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.ANDROID_HOME }}
          ~/.android/cache
        key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/build.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
    
    # Кэширование результатов сборки
    - name: Cache Build results
      uses: actions/cache@v3
      with:
        path: app/build
        key: ${{ runner.os }}-app-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-app-build-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Determine develop version
      id: version
      run: |
        # Получаем последний тег релиза
        git fetch --tags
        LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | head -n 1 || echo "v1.0.0")
        
        # Если тега нет, начинаем с версии 1.0.0
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v1.0.0"
        fi
        
        # Удаляем префикс v из тега
        LATEST_VERSION="${LATEST_TAG#v}"
        
        # Для develop ветки используем текущую версию с суффиксом develop.X
        DEVELOP_VERSION="${LATEST_VERSION}-develop.${{ steps.buildnumber.outputs.build_number }}"
        echo "Develop версия: $DEVELOP_VERSION"
        
        # Выводим для использования в других шагах
        echo "DEVELOP_VERSION=$DEVELOP_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version code and name
      run: |
        echo "Build number: ${{ steps.buildnumber.outputs.build_number }}"
        echo "Develop Version: ${{ steps.version.outputs.DEVELOP_VERSION }}"
        
        # Обновляем версию в build.gradle.kts - для develop добавляем суффикс с номером билда
        sed -i "s/versionCode = .*/versionCode = ${{ steps.buildnumber.outputs.build_number }}/g" app/build.gradle.kts
        sed -i "s/versionName = .*/versionName = \"${{ steps.version.outputs.DEVELOP_VERSION }}\"/g" app/build.gradle.kts
    
    # Запускаем unit-тесты с оптимизациями
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest --build-cache --parallel --no-daemon
      
    # Публикуем результаты тестов
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: '**/build/test-results/**/*.xml'
    
    # Собираем debug-версию с оптимизациями
    - name: Build debug APK
      run: ./gradlew assembleDebug --build-cache --parallel --no-daemon
    
    # Настройка подписи релизной версии
    - name: Setup Android keystore
      run: |
        echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
        
        # Создаем keystore.properties для сборки
        cat << EOF > keystore.properties
        storeFile=../keystore.jks
        storePassword=${{ secrets.KEYSTORE_PASSWORD }}
        keyAlias=${{ secrets.KEY_ALIAS }}
        keyPassword=${{ secrets.KEY_PASSWORD }}
        EOF
        
        # Изменяем права доступа
        chmod 600 keystore.properties
        chmod 600 keystore.jks
    
    # Собираем release-версию с оптимизациями
    - name: Build release APK
      run: ./gradlew assembleRelease --build-cache --parallel --no-daemon
    
    # Переименовываем APK файлы, добавляя номер версии
    - name: Rename APK files
      run: |
        mkdir -p renamed_apk
        cp app/build/outputs/apk/debug/app-debug.apk renamed_apk/app-debug-${{ steps.version.outputs.DEVELOP_VERSION }}.apk
        cp app/build/outputs/apk/release/app-release.apk renamed_apk/app-release-${{ steps.version.outputs.DEVELOP_VERSION }}.apk
    
    # Загружаем debug APK
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-${{ steps.version.outputs.DEVELOP_VERSION }}
        path: renamed_apk/app-debug-${{ steps.version.outputs.DEVELOP_VERSION }}.apk
        retention-days: 30
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        content-type: application/vnd.android.package-archive
    
    # Загружаем release APK
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release-${{ steps.version.outputs.DEVELOP_VERSION }}
        path: renamed_apk/app-release-${{ steps.version.outputs.DEVELOP_VERSION }}.apk
        retention-days: 30
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        content-type: application/vnd.android.package-archive
    
    # Расчет времени сборки
    - name: Calculate build time
      id: build-time
      run: |
        END_TIME=$(date +%s)
        START_TIME=${{ steps.build-time-start.outputs.BUILD_START }}
        DURATION=$((END_TIME - START_TIME))
        
        # Форматируем время в минуты и секунды
        MINUTES=$((DURATION / 60))
        SECONDS=$((DURATION % 60))
        
        if [ $MINUTES -gt 0 ]; then
          BUILD_TIME="${MINUTES}м ${SECONDS}с"
        else
          BUILD_TIME="${SECONDS}с"
        fi
        
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
    
    # Создаем релиз с переименованными APK
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "renamed_apk/app-debug-${{ steps.version.outputs.DEVELOP_VERSION }}.apk,renamed_apk/app-release-${{ steps.version.outputs.DEVELOP_VERSION }}.apk"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: develop-${{ steps.buildnumber.outputs.build_number }}
        name: Develop Build ${{ steps.version.outputs.DEVELOP_VERSION }}
        body: |
          Автоматическая сборка из ветки develop
          
          Номер сборки: ${{ steps.buildnumber.outputs.build_number }}
          Версия: ${{ steps.version.outputs.DEVELOP_VERSION }}
          Коммит: ${{ github.sha }}
          
          В релизе:
          - Debug APK для тестирования
          - Release APK с подписью для расширенного тестирования
          
          Время сборки: ${{ steps.build-time.outputs.build_time }}
        draft: false
        prerelease: true
        makeLatest: false
    
    # Очистка кэшей в редких случаях
    - name: Cleanup Gradle Cache
      # Запускается только по условию, например, еженедельно
      if: github.event_name == 'schedule' && github.event.schedule == '0 0 * * 0'
      run: |
        rm -rf ~/.gradle/caches/modules-2/modules-2.lock
        rm -rf ~/.gradle/caches/transforms-1
        rm -rf ~/.gradle/caches/journal-1
        rm -rf ~/.gradle/caches/jars-3 