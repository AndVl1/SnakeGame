name: Pull Request Build

on:
  pull_request:
    paths:
      - 'app/**'
      - 'gradle/**'
      - 'build.gradle*'
      - 'settings.gradle*'
      - 'gradle.properties'
      - '.github/workflows/pr.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}
    
    # Ребейз на таргет ветку
    - name: Rebase on target branch
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git rebase origin/${{ github.event.pull_request.base.ref }}
    
    # Сохраняем время начала сборки
    - name: Set build start time
      id: build-time-start
      run: echo "BUILD_START=$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: Generate build number
      id: buildnumber
      uses: onyxmueller/build-tag-number@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prefix: 'android'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    # Кэширование Gradle Wrapper
    - name: Cache Gradle Wrapper
      id: cache-gradle-wrapper
      continue-on-error: true
      timeout-minutes: 5
      uses: actions/cache@v3
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-wrapper-
    
    # Кэширование зависимостей Gradle
    - name: Cache Gradle dependencies
      id: cache-gradle-deps
      continue-on-error: true
      timeout-minutes: 10
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/daemon
          ~/.gradle/native
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Кэширование Maven репозитория
    - name: Cache Maven repository
      id: cache-maven
      continue-on-error: true
      timeout-minutes: 8
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/build.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    # Кэширование Android SDK
    - name: Cache Android SDK
      id: cache-android-sdk
      continue-on-error: true
      timeout-minutes: 15
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.ANDROID_HOME }}
          ~/.android/cache
        key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/build.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
    
    # Кэширование результатов сборки
    - name: Cache Build results
      id: cache-build
      continue-on-error: true
      timeout-minutes: 12
      uses: actions/cache@v3
      with:
        path: app/build
        key: ${{ runner.os }}-app-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-app-build-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # Запускаем unit-тесты с оптимизациями
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest --build-cache --parallel --no-daemon
      
    # Публикуем результаты тестов
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: '**/build/test-results/**/*.xml'
    
    - name: Determine PR version
      id: version
      run: |
        # Получаем последний тег релиза
        git fetch --tags
        LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | head -n 1 || echo "v1.0.0")
        
        # Если тега нет, начинаем с версии 1.0.0
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v1.0.0"
        fi
        
        # Удаляем префикс v из тега
        LATEST_VERSION="${LATEST_TAG#v}"
        
        # Для PR используем текущую версию с суффиксом build.X
        PR_VERSION="${LATEST_VERSION}-build.${{ steps.buildnumber.outputs.build_number }}"
        echo "PR версия: $PR_VERSION"
        
        # Выводим для использования в других шагах
        echo "PR_VERSION=$PR_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version code and name
      run: |
        echo "Build number: ${{ steps.buildnumber.outputs.build_number }}"
        echo "PR Version: ${{ steps.version.outputs.PR_VERSION }}"
        
        # Обновляем версию в build.gradle.kts - для PR добавляем суффикс с номером билда
        sed -i "s/versionCode = .*/versionCode = ${{ steps.buildnumber.outputs.build_number }}/g" app/build.gradle.kts
        sed -i "s/versionName = .*/versionName = \"${{ steps.version.outputs.PR_VERSION }}\"/g" app/build.gradle.kts
    
    # Собираем debug-версию с оптимизациями
    - name: Build debug APK
      run: ./gradlew assembleDebug --build-cache --parallel --no-daemon
    
    # Переименовываем APK файл с учетом версии для PR
    - name: Rename APK file
      run: |
        mkdir -p renamed_apk
        cp app/build/outputs/apk/debug/app-debug.apk renamed_apk/app-debug-${{ steps.version.outputs.PR_VERSION }}.apk
    
    # Загружаем debug APK
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-${{ steps.version.outputs.PR_VERSION }}
        path: renamed_apk/app-debug-${{ steps.version.outputs.PR_VERSION }}.apk
        retention-days: 90
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        content-type: application/vnd.android.package-archive
        
    # Расчет времени сборки
    - name: Calculate build time
      id: build-time
      run: |
        END_TIME=$(date +%s)
        START_TIME=${{ steps.build-time-start.outputs.BUILD_START }}
        DURATION=$((END_TIME - START_TIME))
        
        # Форматируем время в минуты и секунды
        MINUTES=$((DURATION / 60))
        SECONDS=$((DURATION % 60))
        
        if [ $MINUTES -gt 0 ]; then
          BUILD_TIME="${MINUTES}м ${SECONDS}с"
        else
          BUILD_TIME="${SECONDS}с"
        fi
        
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
        
    # Добавляем APK в комментарий к PR
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Debug APK

    - name: Create or update comment with APK link
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### Debug APK для тестирования
          
          Сборка версии **${{ steps.version.outputs.PR_VERSION }}** готова ✅
          
          [Скачать APK](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          *Артефакт: `app-debug-${{ steps.version.outputs.PR_VERSION }}`*
          
          **Результаты тестов:** ${{ job.status == 'success' && '✅ Все тесты пройдены' || '❌ Некоторые тесты не прошли' }}
          
          **Время сборки:** ${{ steps.build-time.outputs.build_time || 'Н/Д' }}
        edit-mode: replace
        reactions: rocket
        
    # Очистка кэшей в редких случаях
    - name: Cleanup Gradle Cache
      # Запускается только по условию, например, еженедельно
      if: github.event_name == 'schedule' && github.event.schedule == '0 0 * * 0'
      run: |
        rm -rf ~/.gradle/caches/modules-2/modules-2.lock
        rm -rf ~/.gradle/caches/transforms-1
        rm -rf ~/.gradle/caches/journal-1
        rm -rf ~/.gradle/caches/jars-3 