package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"tgbot/internal/github"
	"tgbot/internal/telegram"
	"tgbot/pkg/types"
)

var (
	api       *telegram.API
	githubAPI *github.API
	config    *types.BotConfig
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	var err error
	config, err = loadConfig()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram API
	api = telegram.NewAPI(config.TgBotKey)

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä GitHub API
	githubAPI = github.NewAPI(config.GitHubToken, config.GitHubOwner, config.GitHubRepo)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	if err := api.HandleUpdates(handleUpdate); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}
}

func loadConfig() (*types.BotConfig, error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
	configPath := filepath.Join("utils", "tgapi.json")
	configData, err := os.ReadFile(configPath)
	if err == nil {
		var config types.BotConfig
		if err := json.Unmarshal(configData, &config); err == nil {
			return &config, nil
		}
		fmt.Println(err)
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	apiKey := os.Getenv("TG_KEY")
	githubToken := os.Getenv("GITHUB_TOKEN")
	githubOwner := os.Getenv("GITHUB_OWNER")
	githubRepo := os.Getenv("GITHUB_REPO")

	if apiKey != "" && githubToken != "" && githubOwner != "" && githubRepo != "" {
		return &types.BotConfig{
			TgBotKey:    apiKey,
			GitHubToken: githubToken,
			GitHubOwner: githubOwner,
			GitHubRepo:  githubRepo,
		}, nil
	}

	return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞")
}

func handleUpdate(update types.Update) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	if update.CallbackQuery != nil {
		handleCallback(update.CallbackQuery)
		return
	}

	if update.Message == nil {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if !isUserAllowed(update.Message.UserID) {
		if err := api.SendMessage(update.Message.ChatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
	if !isChatAllowed(update.Message.ChatID) {
		if err := api.SendMessage(update.Message.ChatID, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if strings.HasPrefix(update.Message.Text, "/") {
		handleCommand(update.Message)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	showMainMenu(update.Message.ChatID)
}

func handleCommand(message *types.Message) {
	switch message.Text {
	case "/help":
		showHelp(message.ChatID)
	default:
		showMainMenu(message.ChatID)
	}
}

func showHelp(chatID int64) {
	helpText := `ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞–º–∏*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

*–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*
üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω —Å–±–æ—Ä–∫–∏ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏
üåø –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–µ—Ç–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
üîÄ Pull Requests - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ PR —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
‚¨áÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —á–∞—Ç–∞–º–∏.`

	keyboard := [][]types.InlineKeyboardButton{
		{
			{
				Text:         "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
				CallbackData: "back_to_main",
			},
		},
	}

	if err := api.SendMessage(chatID, helpText, keyboard); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏: %v", err)
	}
}

func handleCallback(callback *types.CallbackQuery) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if !isUserAllowed(callback.UserID) {
		if err := api.AnswerCallbackQuery(callback.ID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		}
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
	if !isChatAllowed(callback.ChatID) {
		if err := api.AnswerCallbackQuery(callback.ID, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		}
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–¥–∞–Ω–Ω—ã–µ
	switch callback.Data {
	case "create_release":
		handleReleaseCommand(callback)
	case "show_branches":
		handleShowBranches(callback)
	case "show_prs":
		handleShowPRs(callback)
	case "show_latest_release":
		handleShowLatestRelease(callback)
	case "back_to_main":
		keyboard := [][]types.InlineKeyboardButton{
			{
				{
					Text:         "üì¶ –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑",
					CallbackData: "create_release",
				},
			},
			{
				{
					Text:         "üåø –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ç–∫–∏",
					CallbackData: "show_branches",
				},
			},
			{
				{
					Text:         "üîÄ –ü–æ–∫–∞–∑–∞—Ç—å PR",
					CallbackData: "show_prs",
				},
			},
			{
				{
					Text:         "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑",
					CallbackData: "show_latest_release",
				},
			},
		}
		if err := api.EditMessageText(callback.ChatID, callback.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	default:
		if err := api.AnswerCallbackQuery(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		}
	}
}

func showMainMenu(chatID int64) {
	keyboard := [][]types.InlineKeyboardButton{
		{
			{
				Text:         "üì¶ –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑",
				CallbackData: "create_release",
			},
		},
		{
			{
				Text:         "üåø –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ç–∫–∏",
				CallbackData: "show_branches",
			},
		},
		{
			{
				Text:         "üîÄ –ü–æ–∫–∞–∑–∞—Ç—å PR",
				CallbackData: "show_prs",
			},
		},
		{
			{
				Text:         "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑",
				CallbackData: "show_latest_release",
			},
		},
	}

	if err := api.SendMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: %v", err)
	}
}

func isUserAllowed(userID int64) bool {
	for _, id := range config.AllowedUserIDs {
		if id == userID {
			return true
		}
	}
	return false
}

func isChatAllowed(chatID int64) bool {
	for _, id := range config.AllowedChatIDs {
		if id == chatID {
			return true
		}
	}
	return false
}

func handleReleaseCommand(callback *types.CallbackQuery) {
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	if err := api.AnswerCallbackQuery(callback.ID, "–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞..."); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç GitHub
	client := github.NewClient(config.GitHubToken, fmt.Sprintf("%s/%s", config.GitHubOwner, config.GitHubRepo))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
	if err := client.TriggerWorkflow("merge.yml"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: %v", err)
		if err := api.ShowAlert(callback.ID, "‚ùå –û—à–∏–±–∫–∞: –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: %v", err)
		}
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard := [][]types.InlineKeyboardButton{
		{
			{
				Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
				CallbackData: "back_to_main",
			},
		},
	}

	if err := api.EditMessageText(callback.ChatID, callback.MessageID, "‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.", keyboard); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func handleShowBranches(callback *types.CallbackQuery) {
	if err := api.AnswerCallbackQuery(callback.ID, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ç–æ–∫..."); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		return
	}

	branches, err := githubAPI.GetBranches()
	if err != nil {
		if err := api.EditMessageText(callback.ChatID, callback.MessageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ç–æ–∫: %v", err), nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	var message strings.Builder
	message.WriteString("*üåø –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫:*\n\n")
	for _, branch := range branches {
		message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", branch.Name))
	}

	keyboard := [][]types.InlineKeyboardButton{
		{
			{
				Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
				CallbackData: "back_to_main",
			},
		},
	}

	if err := api.EditMessageText(callback.ChatID, callback.MessageID, message.String(), keyboard); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func handleShowPRs(callback *types.CallbackQuery) {
	if err := api.AnswerCallbackQuery(callback.ID, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ PR..."); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		return
	}

	prs, err := githubAPI.GetPullRequests()
	if err != nil {
		if err := api.EditMessageText(callback.ChatID, callback.MessageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ PR: %v", err), nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	var message strings.Builder
	message.WriteString("*üîÄ –°–ø–∏—Å–æ–∫ Pull Requests:*\n\n")
	for _, pr := range prs {
		message.WriteString(fmt.Sprintf("*#%d %s*\n", pr.Number, pr.Title))
		message.WriteString(fmt.Sprintf("‚Ä¢ –ê–≤—Ç–æ—Ä: %s\n", pr.User.Login))
		message.WriteString(fmt.Sprintf("‚Ä¢ –°—Ç–∞—Ç—É—Å: %s\n", pr.State))
		message.WriteString(fmt.Sprintf("‚Ä¢ –°–æ–∑–¥–∞–Ω: %s\n", formatDate(pr.CreatedAt)))
		message.WriteString(fmt.Sprintf("‚Ä¢ [–°—Å—ã–ª–∫–∞ –Ω–∞ PR](%s)\n\n", pr.HTMLURL))
	}

	keyboard := [][]types.InlineKeyboardButton{
		{
			{
				Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
				CallbackData: "back_to_main",
			},
		},
	}

	if err := api.EditMessageText(callback.ChatID, callback.MessageID, message.String(), keyboard); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func handleShowLatestRelease(callback *types.CallbackQuery) {
	if err := api.AnswerCallbackQuery(callback.ID, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–∞—Ö..."); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑ –∏–∑ main –≤–µ—Ç–∫–∏
	release, err := githubAPI.GetLatestRelease()
	if err != nil {
		if err := api.EditMessageText(callback.ChatID, callback.MessageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ: %v", err), nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π pre-release –∏–∑ develop –≤–µ—Ç–∫–∏
	preRelease, err := githubAPI.GetLatestPreRelease()
	if err != nil {
		if err := api.EditMessageText(callback.ChatID, callback.MessageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ pre-release: %v", err), nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	var message strings.Builder
	message.WriteString("*üì• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–∞—Ö*\n\n")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ
	message.WriteString("*–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑ (main):*\n")
	message.WriteString(fmt.Sprintf("‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", release.Name))
	message.WriteString(fmt.Sprintf("‚Ä¢ –¢–µ–≥: %s\n", release.TagName))
	message.WriteString(fmt.Sprintf("‚Ä¢ –°–æ–∑–¥–∞–Ω: %s\n", formatDate(release.CreatedAt)))
	message.WriteString(fmt.Sprintf("‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: %s\n", formatDate(release.PublishedAt)))
	message.WriteString(fmt.Sprintf("‚Ä¢ –°—Å—ã–ª–∫–∞: [GitHub Release](%s)\n\n", release.HTMLURL))

	if len(release.Assets) > 0 {
		message.WriteString("*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:*\n")
		for _, asset := range release.Assets {
			message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", asset.Name))
		}
	}

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º pre-release
	message.WriteString("\n*–ü–æ—Å–ª–µ–¥–Ω–∏–π pre-release (develop):*\n")
	message.WriteString(fmt.Sprintf("‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", preRelease.Name))
	message.WriteString(fmt.Sprintf("‚Ä¢ –¢–µ–≥: %s\n", preRelease.TagName))
	message.WriteString(fmt.Sprintf("‚Ä¢ –°–æ–∑–¥–∞–Ω: %s\n", formatDate(preRelease.CreatedAt)))
	message.WriteString(fmt.Sprintf("‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: %s\n", formatDate(preRelease.PublishedAt)))
	message.WriteString(fmt.Sprintf("‚Ä¢ –°—Å—ã–ª–∫–∞: [GitHub Release](%s)\n", preRelease.HTMLURL))

	if len(preRelease.Assets) > 0 {
		message.WriteString("\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:*\n")
		for _, asset := range preRelease.Assets {
			message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", asset.Name))
		}
	}

	keyboard := [][]types.InlineKeyboardButton{
		{
			{
				Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
				CallbackData: "back_to_main",
			},
		},
	}

	if err := api.EditMessageText(callback.ChatID, callback.MessageID, message.String(), keyboard); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func formatDate(dateStr string) string {
	t, err := time.Parse(time.RFC3339, dateStr)
	if err != nil {
		return dateStr
	}
	return t.Format("02.01.2006 15:04")
}
